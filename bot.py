import asyncio
import aioschedule as schedule
from datetime import datetime
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import logging
from config import TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('schedulers.db')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS schedulers (
    user_id INTEGER PRIMARY KEY,
    time TEXT NOT NULL
)
""")
conn.commit()

async def send_reminder():
    now = datetime.now().strftime('%H:%M')
    cursor.execute('SELECT user_id, time FROM schedulers WHERE time = ?', (now,))
    users = cursor.fetchall()

    for user in users:
        user_id, time = user
        try:
            await bot.send_message(
                user_id, 
                f"‚è∞ –ù–ê–®–ï –í–†–ï–ú–Ø –ù–ê–°–¢–ê–õ–û! –í—Ä–µ–º—è: {time}. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–∏ –æ—à–∏–±–∫–∏."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def scheduler():
    schedule.every(1).minute.do(send_reminder)

    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

@dp.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO schedulers (user_id, time) VALUES (?, ?)', (user_id, '15:55'))
    conn.commit()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/set_schedule HH:MM` ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: `/view_schedule`\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: `/delete_schedule`\n"
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: `/update_schedule <—Å—Ç–∞—Ä–æ–µ_–≤—Ä–µ–º—è> <–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è>`"
    )

@dp.message(Command('set_schedule'))
async def set_schedule(message: types.Message):
    try:
        time_str = message.text.split()[1]
        datetime.strptime(time_str, '%H:%M')
        user_id = message.from_user.id
        cursor.execute('INSERT OR REPLACE INTO schedulers (user_id, time) VALUES (?, ?)', (user_id, time_str))
        conn.commit()
        await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º!")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_schedule HH:MM`, –Ω–∞–ø—Ä–∏–º–µ—Ä, `/set_schedule 14:30`.")

@dp.message(Command('view_schedule'))
async def view_schedule(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT time FROM schedulers WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        await message.answer(f"üïí –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {result[0]}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_schedule HH:MM`, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@dp.message(Command('delete_schedule'))
async def delete_schedule(message: types.Message):
    try:
        user_id = message.from_user.id
        cursor.execute('DELETE FROM schedulers WHERE user_id = ?', (user_id,))
        conn.commit()
        await message.answer("üóëÔ∏è –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command('update_schedule'))
async def update_schedule(message: types.Message):
    try:
        old_time, new_time = message.text.split()[1:3]
        datetime.strptime(new_time, '%H:%M')
        user_id = message.from_user.id
        cursor.execute(
            'UPDATE schedulers SET time = ? WHERE user_id = ? AND time = ?',
            (new_time, user_id, old_time)
        )
        conn.commit()
        await message.answer(f"üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ —Å {old_time} –Ω–∞ {new_time}.")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/update_schedule <—Å—Ç–∞—Ä–æ–µ_–≤—Ä–µ–º—è> <–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è>`, –Ω–∞–ø—Ä–∏–º–µ—Ä, `/update_schedule 14:00 15:30`.")

async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
